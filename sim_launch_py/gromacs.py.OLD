import shutil
import os
import sim_launch_py.plumed as plumed

class _Simulation():

        def __init__(self, name: str, index: int):  #mdrun_options: str, topology: str, path: str):
                """Simulation Class Constructor

                :param name: Name of the simulation
                :type name: str
                :param mdrun_options: options for running MD simulation
                :type mdrun_options: str
                :param topology: name of the topology file
                :type topology: str
                :param path: path definition
                :type path: str
                
                """

                self._name=name
                self._index=index
                self._path=None
                self._state=None
                self._gromacs=None                
                self._mdrun_options=None
                # if running also grompp
                self._topology=None
                self._mdp=None
                self._maxwarn=0
                # if running directly mdrun
                self._tpr=None
                

                
                
                self._name=name
                self._mdrun_options=mdrun_options
                self._topology=topology
                #self._run_options=run_options
                self._path=path
                self._run=False
                self._state=None
                self._type=None
                self._index=None
                self._coordinates=None
                self._maxwarn=None
                self._gromacs=None

                
        @property
        def name(self):
                return self._name

        @property
        def mdrun_options(self):
                return self._mdrun_options

        @property
        def topology(self):
                return self._topology

        @property
        def run(self):
                return self._run

        @property
        def state(self):
                return self._state

        @property
        def path(self):
                return self._path

        @property
        def index(self):
                return self._index

        @name.setter
        def name(self,n):
                self._name=n

        @run.setter
        def run(self,r):
                self._run=r

        @state.setter
        def state(self,s):
                self._state=s

        @index.setter
        def index(self,ndx):
                self._index=ndx


class MD(_Simulation):   
        def __init__(self,  name: str, mdrun_options: str='', coord: str='', topology: str='',
                     path_mdp: str='', path_input: str='', path_output: str='', temperature: float=300., thermostat: str='vv',
                     pressure: float=1, barostat: str='Parrinello-Rahman', nsteps: int=100,
                     print_bash: bool=False, maxwarn: int=0, gmxbin: str='gmx_mpi',
                     plumed: bool=None):
                 """MD simulation class constructor
 
                :param name: Name of the system / project
                :type name: str
                :param mdrun_options:  MD simulation options. Defaults to ''.
                :type mdrun_options: str, optional
                :param coord:  coordinate file name. Defaults to ''.
                :type coord: str, optional
                :param topology: topology file name. Defaults to ''.
                :type topology: str, optional
                :param path_mdp:  path to mdp. Defaults to ''.
                :type path_mdp: str, optional
                :param path_input: path to input file. Defaults to ''.
                :type path_input: str, optional
                :param path_output: path to output file. Defaults to ''.
                :type path_output: str, optional
                :param temperature: temperature of the MD simulation. Defaults to 300.
                :type temperature: float, optional
                :param thermostat: thermostat. Defaults to 'vv'.
                :type thermostat: str, optional
                :param pressure:  pressure. Defaults to 1.
                :type pressure: float, optional
                :param barostat: barostat. Defaults to 'Parrinello-Rahman'.
                :type barostat: str, optional
                :param nsteps: number of simulation steps. Defaults to 100.
                :type nsteps: int, optional
                :param print_bash: print a bash string. Defaults to False.
                :type print_bash: bool, optional
                :param maxwarn: number of warnings tollerated. Defaults to 0.
                :type maxwarn: int, optional
                :param gmxbin:  gromacs executable name. Defaults to 'gmx_mpi'.
                :type gmxbin: str, optional
                :param plumed: plumed file. Defaults to None.
                :type plumed: bool, optional

                """


                 # Inherit properties of the _Simulation Class
                 super().__init__(name, mdrun_options, topology, path_output)

                 self._name=name
                 self._cvs=[]
                 self._biases=[]


                 # copy mdp files
                 shutil.copy(path_mdp,path_input)

                 # Print bash string
                 if print_bash:
                    mdp=os.path.basename(path_mdp)

                    grompp = "{0} grompp -f {1} -p {2} -c {3} -o {4}.tpr -maxwarn {5}".format(gmxbin,
                                                                                              mdp,
                                                                                              topology,
                                                                                              coord,
                                                                                              name,
                                                                                              maxwarn)
                    mdrun = "{0} mdrun -deffnm {1} {2}".format(gmxbin,name,mdrun_options)
                       
                    if plumed is not None:
                            mdrun +=" -plumed {}".format(plumed)

                    self.bash_command="{}\n{}\n".format(grompp,mdrun)


        ###

        @property
        def cvs(self):
            return self._cvs

        @property
        def biases(self):
            return self._biases

        def add_cv(self, name: str ,cvtype: str , **kwargs):

            """ Add a collective variable to the simulation

            :param name: name of the collective variable
            :type name: str
            :param cvtype: type of collective variable, available types are: 'TORSION', 'ENERGY'.
            :type cvtype: str
            :param **kwargs : keyword arguments for the chosen type of variable
            :returns new_cv: the new collective variable
            :rtype new_cv: CV object 

            """
        
            supported=['TORSION','ENERGY']

            if cvtype.upper()=='TORSION':
                    new_cv=plumed.Torsion(name,kwargs['atoms'])
                    self._cvs.append(new_cv)
            elif cvtype.upper()=='ENERGY':
                    new_cv=plumed.PotentialEnergy(name)
                    self._cvs.append(new_cv)
            else:
                    print("Error: for the moment only {} are supported as collective variables... sorry".format(supported))
                    exit()

            return new_cv
    
        def add_bias(self, name: str, biastype: str, cv: object ,**kwargs):

                """ Add a bias to the simulation

                :param name: name of the bias
                :type name: str
                :param biastype: type of bias to apply, available types are:  'METAD', 'UPPER_WALLS', 'LOWER_WALLS'
                :type biastype: str
                :param cv: name of the collective variable to bias
                :type cv: object
                :param **kwargs : keyword arguments that depend on the specific bias
                :returns new_bias: the new bias object
                :rtype object: 

                """
                
                supported=["METAD","UPPER_WALLS","LOWER_WALLS"]
        
                if biastype.upper()=='METAD':
                    new_bias=plumed.Metad(name,cv,**kwargs)            
                elif biastype.upper()=="UPPER_WALLS":
                    new_bias=plumed.UpperWalls(name,cv,**kwargs)
                elif biastype.upper()=="LOWER_WALLS":
                    new_bias=plumed.LowerWalls(name,cv,**kwargs)                            
                else:
                    print("Error: for the moment only {} are supported as bias... sorry".format(supported))
                    exit()

                self._biases.append(new_bias)

                return new_bias
            
class EnergyMinimization(_Simulation):

        def __init__(self,name: str, mdrun_options: str='', coord: str='start.pdb', topology: str='topol.top',
                     path_mdp: str='', path_input: str='',path_output: str='',
                     print_bash: str=False, maxwarn: int=0, gmxbin: str='gmx_mpi'):
                """Energy minimization class

                :param name: Name of the system / project
                :type name: str
                :param mdrun_options: MD simulation options. Defaults to ''.
                :type mdrun_options: str, optional
                :param coord: coordinate file name. Defaults to ''.
                :type coord: str, optional
                :param topology: topology file name. Defaults to ''.
                :type topology: str, optional
                :param path_mdp: path to mdp. Defaults to ''.
                :type path_mdp: str, optional
                :param path_input: path to input file. Defaults to ''.
                :type path_input: str, optional
                :param path_output:  path to output file. Defaults to ''.
                :type path_output: str, optional
                :param print_bash: print a bash string. Defaults to False.
                :type print_bash: str, optional
                :param maxwarn: number of warnings tollerated. Defaults to 0.
                :type maxwarn: int, optional
                :param gmxbin: gromacs executable name. Defaults to 'gmx_mpi'.
                :type gmxbin: str, optional
                :returns: 

                """

                # Inherit properties of the _Simulation Class
                super().__init__(name, mdrun_options, topology, path_output)

                self._name=name

                # copy mdp files
                shutil.copy(path_mdp,path_input)

                # Print bash string
                if print_bash:
                    mdp=os.path.basename(path_mdp)
                    self.bash_command="{5} grompp -f {0} -p {1} -c {2} -o {3}.tpr -maxwarn {4}\n\n".format(mdp,topology,coord,name,maxwarn,gmxbin)+\
                            "{2} mdrun -deffnm {0} {1}\n".format(name,mdrun_options,gmxbin)
                


            
        
        


