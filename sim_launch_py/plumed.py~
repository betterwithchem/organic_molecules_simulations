


class _CV():

    def __init__(self, name: str):
        """CV Class Constructur
   
        Args:
           name (str): Name of the collective variable
        """
        
        self._name=name

        @property
        def name(self):
            return self._name

        @name.setter
        def name(self,n):
            self._name=n

class Torsion(_CV):

    def __init__(self,name: str, atoms: list()):
        """Torsion collective variable class constructor
 
        Args:
            name(str) : Name of the torsional collective variable. 
            atoms(list) : List of atom ids that compose the torsional angle. 
        """

        # Inherit properties of the _CV Class
        super().__init__(name)

        self._name=name

        if len(atoms)!=4:
            print("ERROR: Exactly 4 atoms are needed to define a Torsion angle. {} given {}.".format(len(atoms),atoms))
            exit()
        
        self._atoms=atoms

    @property
    def atoms(self):
        return self._atoms

class Group():

    def __init__(self, name: str, atoms=[],
                 universe=None, selection=''):
        
        """Group Class Constructor

        Args:
            name (str): Name of the simulation
            atoms (list, optional): list of atoms in the group. Defaults to [].
            universe (MDAnalysis.Universe, optional): Universe of the system. Defaults to None.
            selection (str, optional): selection for the Universe. Defaults to ''.
        """
        
        self._name=name
        self._atoms=atoms
        self._universe=universe
        self._selection=selection

        self._natoms=len(atoms)

    @property
    def name(self):
        return self._name

    @property
    def atoms(self):
        return self._atoms

    @property
    def universe(self):
        return self._universe

    @property
    def selection(self):
        return self._selection

    @property
    def natoms(self):
        return self._natoms

    @atoms.setter
    def atoms(self,a):
        self._atoms=a
        self._natoms=len(a)

    @universe.setter
    def universe(self,u):
        self._universe=u
        
    @selection.setter
    def selection(self,s):
        self._selection=s

    
       
def writePlumedFile(simulation,plumed_file):

    import os
    import shutil
    
    if os.isfile(plumed_file):
        location=os.path
        shutil.copy(plumed_file,"{}.bkp".format(plumed_file))
        
    with(plumed_file,'w') as f:
        
        for group in simulation.groups:
            f.write("GROUP ATOMS")

        

        
        
